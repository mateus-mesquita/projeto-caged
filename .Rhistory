and "grau de instrucao" = ""
and sexo = ""
')
resultado = dbGetQuery(con,raca)
dbDisconnect(con)
return(resultado[[1]])
}
query_grau_inst = function(grau_inst) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
instrucao = glue('Select estoque from RAIS
where estado = ""
and raca = ""
and "grau de instrucao" = "{grau_inst}"
and sexo = ""')
resultado = dbGetQuery(con,instrucao)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta considerando apenas os estados:
query_estados = function(uf) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
uf =  glue('
Select estoque from RAIS
where estado = "{uf}"
and raca = ""
and "grau de instrucao" = ""
and sexo = ""
')
resultado = dbGetQuery(con,vazio)
dbDisconnect(con)
return(resultado[[1]])
}
#Função que retorna a consulta para todas as condições estarem em branco:
query = function() {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
vazio = glue('
Select estoque from RAIS
where estado = ""
and raca = ""
and "grau de instrucao" = ""
and sexo = ""
')
resultado = dbGetQuery(con,vazio)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta considerando apenas os estados:
query_estados = function(uf) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
uf =  glue('
Select estoque from RAIS
where estado = "{uf}"
and raca = ""
and "grau de instrucao" = ""
and sexo = ""
')
resultado = dbGetQuery(con,vazio)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta considerando apenas os sexos:
query_sexo = function(sexo) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
sexo = glue('
Select estoque from RAIS
where estado = ""
and raca = ""
and "grau de instrucao" = ""
and sexo = "{sexo}"
')
resultado = dbGetQuery(con,sexo)
dbDisconnect(con)
return(resultado[[1]])
}
query_raca = function(raca) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
raca= glue('Select estoque from RAIS
where estado = ""
and raca = "{raca}"
and "grau de instrucao" = ""
and sexo = ""
')
resultado = dbGetQuery(con,raca)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta considerando apenas os estados:
query_estados = function(uf) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
uf =  glue('
Select estoque from RAIS
where estado = "{uf}"
and raca = ""
and "grau de instrucao" = ""
and sexo = ""
')
resultado = dbGetQuery(con,vazio)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta para uf e sexo:
query_uf1 = function(uf,sexo) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
tabela_uf1 = glue('
Select estoque from RAIS
where estado = "{uf}"
and raca = ""
and "grau de instrucao" = ""
and sexo = "{sexo}"
')
resultado = dbGetQuery(con,tabela_uf1)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta para uf, sexo e raça:
query_sem_instrucao = function(uf,sexo,raca) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
tabela_uf2 = glue('
Select estoque from RAIS
where estado = "{uf}"
and raca = "{raca}"
and "grau de instrucao" = ""
and sexo = "{sexo}"
')
resultado = dbGetQuery(con,tabela_uf2)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta para uf,raça,sexo e grau de intrução:
query_geral = function(uf,raca,sexo,grau_inst) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
tabela_uf3 = glue('
Select estoque from RAIS
where estado = "{uf}"
and raca = "{raca}"
and "grau de instrucao" = "{grau_inst}"
and sexo = "{sexo}"
')
resultado = dbGetQuery(con,tabela_uf3)
dbDisconnect(con)
return(resultado[[1]])
}
query_uf_raca = function(uf,raca) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
tabela_uf4 = glue('
Select estoque from RAIS
where estado = "{uf}"
and raca = "{raca}"
and "grau de instrucao" = ""
and sexo = ""
')
resultado = dbGetQuery(con,tabela_uf4)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta para uf e grau de instrução:
query_graus_uf = function(uf,grau_inst) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
tabela_uf5 = glue('
Select estoque from RAIS
where estado = "{uf}"
and raca = ""
and "grau de instrucao" = "{grau_inst}"
and sexo = ""
')
resultado = dbGetQuery(con,tabela_uf5)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta para raça e grau de instrução:
query_raca_inst = function(raca,grau_inst) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
raca_inst = glue('
Select estoque from RAIS
where estado = ""
and raca = "{raca}"
and "grau de instrucao" = "{grau_inst}"
and sexo = ""
')
resultado = dbGetQuery(con,raca_inst)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta para uf, sexo e grau de instrução:
query_sem_sx = function(uf,raca,grau_inst) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
uf_raca_inst = glue('
Select estoque from RAIS
where estado = "{uf}"
and raca = "{raca}"
and "grau de instrucao" = "{grau_inst}"
and sexo = ""
')
resultado = dbGetQuery(con,uf_raca_inst)
dbDisconnect(con)
return(resultado[[1]])
}
return(resultado[[1]]
query_sexo_raca = function(sexo,raca) {
# Consulta para sexo e grau de instrução:
query_sexo_inst = function(sexo,grau_inst){
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
sexo_inst = glue('
Select estoque from RAIS
where estado = ""
and raca = ""
and "grau de instrucao" = "{grau_inst}"
and sexo = "{sexo}"
')
resultado = dbGetQuery(con,sexo_inst)
dbDisconnect(con)
return(resultado[[1]])
}
# Consulta para sexo, raça e grau de instrução:
query_sem_uf = function(sexo,raca,grau_inst) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
tabela_sem_uf = glue('
Select estoque from RAIS
where estado = ""
and raca = "{raca}"
and "grau de instrucao" = "{grau_inst}"
and sexo = "{sexo}"
')
resultado = dbGetQuery(con,tabela_sem_uf)
dbDisconnect(con)
return(resultado[[1]])
}
_
query_sem_raca = function(uf,sexo,grau_inst) {
db = dbDriver('SQLite')
con = dbConnect(db,dbname = 'rais.db')
tabela_geral_r = glue('
Select estoque from RAIS
where estado = "{uf}"
and raca = ""
and "grau de instrucao" = "{grau_inst}"
and sexo = "{sexo}"
')
resultado = dbGetQuery(con,tabela_geral_uf)
dbDisconnect(con)
return(resultado[[1]])
}
estoque_alterado_teste = function(ano,uf_,sexo_,raca_,grau_inst_,cnae_2_menor, cnae_2_maior,cbo) {
estados = c('CE','PE') # lista de estados
sexo_lista = c( "Feminino", "Masculino", "Não informado") # sexo
raca_lista = c("Branca", "Preta", "Parda", "Amarela", "Indígena",
"Não informada", "Não identificado" ) # Raças
grau_de_instrucao = c( "ANALFABETO", "ATE 5.A INC", "5.A CO FUND", "6.A.9.FUND",
"FUND COMPL", "MEDIO INCOMP", "MEDIO COMPL",
"SUP.INCOMP", "SUP.COMP", "MESTRADO",
"DOUTORADO") # níveis de escolaridades
# Consulta caso todos os valores sejam verdadeiros:
if(ano == 2022 & uf_ %in% estados & sexo_ %in% sexo_lista & raca_ %in% raca_lista
& grau_inst_ %in% grau_de_instrucao & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_geral(uf = uf_,sexo = sexo_,raca = raca_,grau_inst = grau_inst_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna caso os valores estejam em branco:
if(ano == 2022 & uf_ == '' & sexo_ == '' & raca_ == ''
& grau_inst_ == '' & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query()
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna apenas para estados (os outros valores devem estar em branco):
if(ano == 2022 & uf_ %in% estados & sexo_ == '' & raca_ == ''
& grau_inst_ == '' & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_estados(uf = uf_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna apenas paras as sexos ( os outros devem estar em branco):
if(ano == 2022 & uf_ == '' & sexo_ %in% sexo_lista & raca_ == ''
& grau_inst_ == '' & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_sexo(sexo = sexo_)
valor_ = as.numeric(valor)
return(valor_)
}
if(ano == 2022 & uf_ == '' & sexo_ %in% sexo_lista & raca_ %in% raca_lista
& grau_inst_ == '' & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_sexo_raca(sexo = sexo_,raca = raca_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna apenas para as raças (Os outros devem estar em branco):
if(ano == 2022 & uf_ == '' & sexo_ == '' & raca_ %in% raca_lista
& grau_inst_ == '' & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_raca(raca = raca_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna apenas para os graus de instrução (Os outros devem estar em branco):
if(ano == 2022 & uf_ == '' & sexo_ == '' & raca_ == ''
& grau_inst_ %in% grau_de_instrucao & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_grau_inst(grau_inst = grau_inst_)
valor_ = as.numeric(valor)
return(valor_)
}
# Colnsulta que retorna apenas para uf e sexo(Os outros devem estar em branco):
if(ano == 2022 & uf_ %in% estados & sexo_ %in% sexo_lista & raca_ == ''
& grau_inst_ =='' & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_uf1(uf = uf_,sexo = sexo_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna apenas para uf e raça(Os outros devem estar em branco):
if(ano == 2022 & uf_ %in% estados & sexo_ == '' & raca_ %in% raca_lista
& grau_inst_ == '' & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_uf_raca(uf = uf_,raca = raca_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna apenas para uf e grau de instrução(Os brancos devem estar em branco):
if(ano == 2022 & uf_ %in% estados & sexo_ == '' & raca_== ''
& grau_inst_ %in% grau_de_instrucao & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_graus_uf(uf = uf_,grau_inst= grau_inst_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna para uf, sexo e raça(Os outros devem estar em branco):
if(ano == 2022 & uf_ %in% estados & sexo_ %in% sexo_lista & raca_ %in% raca_lista
& grau_inst_ == '' & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_sem_instrucao(uf = uf_,sexo = sexo_,raca = raca_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna sexo e raça(Os outros devem estar em branco):
if(ano == 2022 & uf_ == '' & sexo_ %in% sexo_lista & raca_ == ""
& grau_inst_ %in% grau_de_instrucao & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_sexo_inst(sexo = sexo_,grau_inst = grau_inst_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna sexo e grau de instrução(Os outros devem estar em branco)
if(ano == 2022 & uf_ == '' & sexo_ %in% sexo_lista & raca_ == ''
& grau_inst_ %in% grau_de_instrucao & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_sem_uf(sexo = sexo_,raca = raca_ ,grau_inst = grau_inst_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna sexo, raça e grau de instrução(Os outros devem estar em branco):
if(ano == 2022 & uf_ == '' & sexo_ %in% sexo_lista & raca_ %in% raca_lista
& grau_inst_ %in% grau_de_instrucao & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_sem_uf(sexo = sexo_,raca = raca_,grau_inst = grau_inst_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna raça e grau de instrução(Os outros devem estar em branco):
if(ano == 2022 & uf_ == '' & sexo_ =='' & raca_ %in% raca_lista
& grau_inst_ %in% grau_de_instrucao & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_raca_inst(raca = raca_,grau_inst = grau_inst_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna uf, raça e grau de instrução(Os outros devem estar em branco):
if(ano == 2022 & uf_ %in% estados & sexo_ =='' & raca_ %in% raca_lista
& grau_inst_ %in% grau_de_instrucao & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_sem_sx(uf = uf_,raca = raca_,grau_inst = grau_inst_)
valor_ = as.numeric(valor)
return(valor_)
}
# Consulta que retorna uf, sexo e grau de instução(Os outros devem estar em branco):
if(ano == 2022 & uf_ %in% estados & sexo_ %in% sexo_lista & raca_ == ""
& grau_inst_ %in% grau_de_instrucao & cnae_2_maior == FALSE & cnae_2_menor == FALSE & cbo == FALSE){
valor = query_sem_raca(uf = uf_,sexo = sexo_,grau_inst = grau_inst_)
valor_ = as.numeric(valor)
return(valor_)
}
}
preprocessamento <- function(arquivo_caged)
{
# Abrindo os dados
caged <- read.csv(arquivo_caged, sep=";")
inicial <- ncol(caged)
# Idade
# Nada a fazer.
# Sexo
caged$sexo[caged$sexo==1] <- 'Masculino'
caged$sexo[caged$sexo==3] <- 'Feminino'
caged$sexo[caged$sexo==9] <- 'Não informado'
# UF Nomeado
caged$uf[caged$uf==11] <- 'Rondônia'
caged$uf[caged$uf==12] <- 'Acre'
caged$uf[caged$uf==13] <- 'Amazonas'
caged$uf[caged$uf==14] <- 'Roraima'
caged$uf[caged$uf==15] <- 'Pará'
caged$uf[caged$uf==16] <- 'Amapá'
caged$uf[caged$uf==17] <- 'Tocantins'
caged$uf[caged$uf==21] <- 'Maranhão'
caged$uf[caged$uf==22] <- 'Piauí'
caged$uf[caged$uf==23] <- 'Ceará'
caged$uf[caged$uf==24] <- 'Rio Grande do Norte'
caged$uf[caged$uf==25] <- 'Paraíba'
caged$uf[caged$uf==26] <- 'Pernambuco'
caged$uf[caged$uf==27] <- 'Alagoas'
caged$uf[caged$uf==28] <- 'Sergipe'
caged$uf[caged$uf==29] <- 'Bahia'
caged$uf[caged$uf==31] <- 'Minas Gerais'
caged$uf[caged$uf==32] <- 'Espírito Santo'
caged$uf[caged$uf==33] <- 'Rio de Janeiro'
caged$uf[caged$uf==35] <- 'São Paulo'
caged$uf[caged$uf==41] <- 'Paraná'
caged$uf[caged$uf==42] <- 'Santa Catarina'
caged$uf[caged$uf==43] <- 'Rio Grande do Sul'
caged$uf[caged$uf==50] <- 'Mato Grosso do Sul'
caged$uf[caged$uf==51] <- 'Mato Grosso'
caged$uf[caged$uf==52] <- 'Goiás'
caged$uf[caged$uf==53] <- 'Distrito Federal'
# região
caged$região[caged$região==1] <- 'Norte'
caged$região[caged$região==2] <- 'Nordeste'
caged$região[caged$região==3] <- 'Sudeste'
caged$região[caged$região==4] <- 'Sul'
caged$região[caged$região==5] <- 'Centro-Oeste'
caged$região[caged$região==9] <- 'Não identificado'
# raçacor
caged$raçacor[caged$raçacor==1] <- 'Branca'
caged$raçacor[caged$raçacor==2] <- 'Preta'
caged$raçacor[caged$raçacor==3] <- 'Parda'
caged$raçacor[caged$raçacor==4] <- 'Amarela'
caged$raçacor[caged$raçacor==5] <- 'Indígena'
caged$raçacor[caged$raçacor==6] <- 'Não informada'
caged$raçacor[caged$raçacor==9] <- 'Não identificada'
# grau de instrução
caged$graudeinstrução[caged$graudeinstrução==1] <- 'Analfabeto'
caged$graudeinstrução[caged$graudeinstrução==2] <- '5º incompleto'
caged$graudeinstrução[caged$graudeinstrução==3] <- '5º completo'
caged$graudeinstrução[caged$graudeinstrução==4] <- '6ª a 9ª Fundamental'
caged$graudeinstrução[caged$graudeinstrução==5] <- 'Fundamental Completo'
caged$graudeinstrução[caged$graudeinstrução==6] <- 'Médio Incompleto'
caged$graudeinstrução[caged$graudeinstrução==7] <- 'Médio completo'
caged$graudeinstrução[caged$graudeinstrução==8] <- 'Superior Incompleto'
caged$graudeinstrução[caged$graudeinstrução==9] <- 'Superior Completo'
caged$graudeinstrução[caged$graudeinstrução==10] <- 'Mestrado'
caged$graudeinstrução[caged$graudeinstrução==11] <- 'Doutorado'
caged$graudeinstrução[caged$graudeinstrução==80] <- 'Pós-Graduação completa'
caged$graudeinstrução[caged$graudeinstrução==99] <- 'Não identificado'
# seção
caged$seção[caged$seção=='A'] <- 'Agricultura, Pecuária, Produção Florestal, Pesca e AqÜIcultura'
caged$seção[caged$seção=='B'] <- 'Indústrias Extrativas'
caged$seção[caged$seção=='C'] <- 'Indústrias de Transformação'
caged$seção[caged$seção=='D'] <- 'Eletricidade e Gás'
caged$seção[caged$seção=='E'] <- 'Água, Esgoto, Atividades de Gestão de Resíduos e Descontaminação'
caged$seção[caged$seção=='F'] <- 'Construção'
caged$seção[caged$seção=='G'] <- 'Comércio, Reparação de Veículos Automotores e Motocicletas'
caged$seção[caged$seção=='H'] <- 'Transporte, Armazenagem e Correio'
caged$seção[caged$seção=='I'] <- 'Alojamento e Alimentação'
caged$seção[caged$seção=='J'] <- 'Informação e Comunicação'
caged$seção[caged$seção=='K'] <- 'Atividades Financeiras, de Seguros e Serviços Relacionados'
caged$seção[caged$seção=='L'] <- 'Atividades Imobiliárias'
caged$seção[caged$seção=='M'] <- 'Atividades Profissionais, Científicas e Técnicas'
caged$seção[caged$seção=='N'] <- 'Atividades Administrativas e Serviços Complementares'
caged$seção[caged$seção=='O'] <- 'Administração Pública, Defesa e Seguridade Social'
caged$seção[caged$seção=='P'] <- 'Educação'
caged$seção[caged$seção=='Q'] <- 'Saúde Humana e Serviços Sociais'
caged$seção[caged$seção=='R'] <- 'Artes, Cultura, Esporte e Recreação'
caged$seção[caged$seção=='S'] <- 'Outras Atividades de Serviços'
caged$seção[caged$seção=='T'] <- 'Serviços Domésticos'
caged$seção[caged$seção=='U'] <- 'Organismos Internacionais e Outras Instituições Extraterritoriais'
caged$seção[caged$seção=='Z'] <- 'Não identificado'
# categoria
caged$categoria[caged$categoria==101] <- 'Empregado - Geral, inclusive o empregado público da administração direta ou indireta contratado pela CLT'
caged$categoria[caged$categoria==102] <- 'Empregado - Trabalhador rural por pequeno prazo da Lei 11.718/2008'
caged$categoria[caged$categoria==103] <- 'Empregado - Aprendiz'
caged$categoria[caged$categoria==104] <- 'Empregado - Doméstico'
caged$categoria[caged$categoria==105] <- 'Empregado - Contrato a termo firmado nos termos da Lei 9.601/1998'
caged$categoria[caged$categoria==106] <- 'Trabalhador temporário - Contrato nos termos da Lei 6.019/1974'
caged$categoria[caged$categoria==107] <- 'Empregado - Contrato de trabalho Verde e Amarelo - sem acordo para antecipação mensal da multa rescisória do FGTS'
caged$categoria[caged$categoria==108] <- 'Empregado - Contrato de trabalho Verde e Amarelo - com acordo para antecipação mensal da multa rescisória do FGTS'
caged$categoria[caged$categoria==111] <- 'Empregado - Contrato de trabalho intermitente'
caged$categoria[caged$categoria==999] <- 'Não Identificado'
# tipo de movimentação
caged$tipomovimentação[caged$tipomovimentação==10] <- 'Admissão por primeiro emprego'
caged$tipomovimentação[caged$tipomovimentação==20] <- 'Admissão por reemprego'
caged$tipomovimentação[caged$tipomovimentação==25] <- 'Admissão por contrato trabalho prazo determinado'
caged$tipomovimentação[caged$tipomovimentação==31] <- 'Desligamento por demissão sem justa causa'
caged$tipomovimentação[caged$tipomovimentação==32] <- 'Desligamento por demissão com justa causa'
caged$tipomovimentação[caged$tipomovimentação==33] <- 'Culpa Recíproca'
caged$tipomovimentação[caged$tipomovimentação==35] <- 'Admissão por reintegração'
caged$tipomovimentação[caged$tipomovimentação==40] <- 'Desligamento a pedido'
caged$tipomovimentação[caged$tipomovimentação==43] <- 'Término contrato trabalho prazo determinado'
caged$tipomovimentação[caged$tipomovimentação==45] <- 'Desligamento por Término de contrato'
caged$tipomovimentação[caged$tipomovimentação==50] <- 'Desligamento por aposentadoria'
caged$tipomovimentação[caged$tipomovimentação==60] <- 'Desligamento por morte'
caged$tipomovimentação[caged$tipomovimentação==70] <- 'Admissão por transferência'
caged$tipomovimentação[caged$tipomovimentação==80] <- 'Desligamento por transferência'
caged$tipomovimentação[caged$tipomovimentação==90] <- 'Desligamento por Acordo entre empregado e empregador'
caged$tipomovimentação[caged$tipomovimentação==97] <- 'Admissão de Tipo Ignorado'
caged$tipomovimentação[caged$tipomovimentação==98] <- 'Desligamento de Tipo Ignorado'
caged$tipomovimentação[caged$tipomovimentação==99] <- 'Não Identificado'
return(caged)
}
setwd("C:/Users/Mateus/OneDrive/RAIS")
enumerar_conjuntos_anterior(cageds)
enumerar_conjuntos_anterior(cageds)
